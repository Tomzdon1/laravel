<?php
/**
 * PurchasePolicyRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  App\apiModels\travel\v2
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace App\apiModels\travel\v2\Prototypes ;

use \ArrayAccess;
/**
 * PurchasePolicyRequest Class Doc Comment
 *
 * @category    Class
 * @description Zestaw danych do zakupu polisy
 * @package     App\apiModels\travel\v2
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PurchasePolicyRequest extends \App\apiModels\ApiModel implements ArrayAccess 
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'calculation_id' => 'string',
        'continue_url' => 'string',
        'notify_url' => 'string',
        'solicitors' => 'App\apiModels\travel\v2\Prototypes\Solicitor[]',
        'checksum' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'calculation_id' => 'calculation_id',
        'continue_url' => 'continue_url',
        'notify_url' => 'notify_url',
        'solicitors' => 'solicitors',
        'checksum' => 'checksum'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'calculation_id' => 'setCalculationId',
        'continue_url' => 'setContinueUrl',
        'notify_url' => 'setNotifyUrl',
        'solicitors' => 'setSolicitors',
        'checksum' => 'setChecksum'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'calculation_id' => 'getCalculationId',
        'continue_url' => 'getContinueUrl',
        'notify_url' => 'getNotifyUrl',
        'solicitors' => 'getSolicitors',
        'checksum' => 'getChecksum'
    );
  
    
    /**
      * $calculation_id Identyfikator kalkulacji
      * @var string
      */
    public $calculation_id;
    
    /**
      * $continue_url Adres URL, na który kupujący zostanie przekierowany po zakończeniu procesu płatności. W przypadku braku autoryzacji do URL'a doklejany jest parametr error=501. Adres ma tylko charakter informacyjny, nie można na jego podstawie podejmować żadnych decyzji.
      * @var string
      */
    public $continue_url;
    
    /**
      * $notify_url Adres URL, na który przychodzić będą powiadomienia o zmianie statusu zakupu polisy
      * @var string
      */
    public $notify_url;
    
    /**
      * $solicitors Informacje o OWCA biorących udział w sprzedaży polisy; Wartości tego pola są weryfikowane a dokładnie uprawnienia agenta/owca do sprzedaży danego typu polisy
      * @var App\apiModels\travel\v2\Prototypes\Solicitor[]
      */
    public $solicitors;
    
    /**
      * $checksum Suma kontrolna kalkulacji
      * @var string
      */
    public $checksum;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->calculation_id = $data["calculation_id"];
            $this->continue_url = $data["continue_url"];
            $this->notify_url = $data["notify_url"];
            $this->solicitors = $data["solicitors"];
            $this->checksum = $data["checksum"];
        }
    }
    
    /**
     * Gets calculation_id
     * @return string
     */
    public function getCalculationId()
    {
        return $this->calculation_id;
    }
  
    /**
     * Sets calculation_id
     * @param string $calculation_id Identyfikator kalkulacji
     * @return $this
     */
    public function setCalculationId($calculation_id)
    {
        
        $this->calculation_id = $calculation_id;
        return $this;
    }
    
    /**
     * Gets continue_url
     * @return string
     */
    public function getContinueUrl()
    {
        return $this->continue_url;
    }
  
    /**
     * Sets continue_url
     * @param string $continue_url Adres URL, na który kupujący zostanie przekierowany po zakończeniu procesu płatności. W przypadku braku autoryzacji do URL'a doklejany jest parametr error=501. Adres ma tylko charakter informacyjny, nie można na jego podstawie podejmować żadnych decyzji.
     * @return $this
     */
    public function setContinueUrl($continue_url)
    {
        
        $this->continue_url = $continue_url;
        return $this;
    }
    
    /**
     * Gets notify_url
     * @return string
     */
    public function getNotifyUrl()
    {
        return $this->notify_url;
    }
  
    /**
     * Sets notify_url
     * @param string $notify_url Adres URL, na który przychodzić będą powiadomienia o zmianie statusu zakupu polisy
     * @return $this
     */
    public function setNotifyUrl($notify_url)
    {
        
        $this->notify_url = $notify_url;
        return $this;
    }
    
    /**
     * Gets solicitors
     * @return App\apiModels\travel\v2\Prototypes\Solicitor[]
     */
    public function getSolicitors()
    {
        return $this->solicitors;
    }
  
    /**
     * Sets solicitors
     * @param App\apiModels\travel\v2\Prototypes\Solicitor[] $solicitors Informacje o OWCA biorących udział w sprzedaży polisy; Wartości tego pola są weryfikowane a dokładnie uprawnienia agenta/owca do sprzedaży danego typu polisy
     * @return $this
     */
    public function setSolicitors($solicitors)
    {
        
        $this->solicitors = $solicitors;
        return $this;
    }
    
    /**
     * Gets checksum
     * @return string
     */
    public function getChecksum()
    {
        return $this->checksum;
    }
  
    /**
     * Sets checksum
     * @param string $checksum Suma kontrolna kalkulacji
     * @return $this
     */
    public function setChecksum($checksum)
    {
        
        $this->checksum = $checksum;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}

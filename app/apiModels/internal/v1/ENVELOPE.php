<?php

/**
 * Envelope
 *
 * PHP version 5
 *
 * @category Class
 * @package  App\apiModels\travel\v1
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace App\apiModels\internal\v1;

use \ArrayAccess;

/**
 * Envelope Class Doc Comment
 *
 * @category    Class
 * @description Koperta wiadomości
 * @package     App\apiModels\travel\v1
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Envelope extends \App\apiModels\ApiModel implements ArrayAccess
{

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @var string[]
     */
    public static $swaggerTypes = array(
        'type' => 'string',
        'api' => 'object',
        'status' => 'string',
        'errors' => 'string[]',
        'company' => 'string[]',
        'src_id' => 'string',
        'dst_id' => 'string',
        'send_dt' => '\DateTime',
        'body' => 'object'
    );

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    public static $attributeMap = array(
        'type' => 'type',
        'api' => 'api',
        'status' => 'status',
        'errors' => 'errors',
        'company' => 'company',
        'src_id' => 'src_id',
        'dst_id' => 'dst_id',
        'send_dt' => 'sendDT',
        'body' => 'body'
    );

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    public static $setters = array(
        'type' => 'setType',
        'api' => 'setApi',
        'status' => 'setStatus',
        'errors' => 'setErrors',
        'company' => 'setCompany',
        'src_id' => 'setSrcId',
        'dst_id' => 'setDstId',
        'send_dt' => 'setSendDt',
        'body' => 'setBody'
    );

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    public static $getters = array(
        'type' => 'getType',
        'api' => 'getApi',
        'status' => 'getStatus',
        'errors' => 'getErrors',
        'company' => 'getCompany',
        'src_id' => 'getSrcId',
        'dst_id' => 'getDstId',
        'send_dt' => 'getSendDt',
        'body' => 'getBody'
    );

    /**
     * $type Opis typu wiadomości. Np: policy
     * @var string
     */
    protected $type;

    /**
     * $api Informacje dotyczące użytej wersji API
     * @var object
     */
    protected $api;

    /**
     * $status Status przesyłanego obiektu
     * @var string
     */
    protected $status;

    /**
     * $errors Błędy przesyłanego obiektu
     * @var string[]
     */
    protected $errors;

    /**
     * $company Określenie spółki, której dotyczy wiadomość
     * @var string[]
     */
    protected $company;

    /**
     * $src_id Identyfikator w systemie wysyłającym. W przypadku CP skrócona nazwaKolekcji_MongoId
     * @var string
     */
    protected $src_id;

    /**
     * $dst_id Identyfikator w procesie docelowym, jeśli jest znany
     * @var string
     */
    protected $dst_id;

    /**
     * $send_dt Czas utworzenia wiadomości
     * @var \DateTime
     */
    protected $send_dt;

    /**
     * $body Przesyłany obiekt
     * @var object
     */
    protected $body;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->type = $data["type"];
            $this->api = $data["api"];
            $this->status = $data["status"];
            $this->errors = $data["errors"];
            $this->company = $data["company"];
            $this->src_id = $data["src_id"];
            $this->dst_id = $data["dst_id"];
            $this->send_dt = $data["send_dt"];
            $this->body = $data["body"];
        }
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Sets type
     * @param string $type Opis typu wiadomości. Np: policy
     * @return $this
     */
    public function setType($type)
    {

        $this->type = $type;
        return $this;
    }

    /**
     * Gets api
     * @return object
     */
    public function getApi()
    {
        return $this->api;
    }

    /**
     * Sets api
     * @param object $api Informacje dotyczące użytej wersji API
     * @return $this
     */
    public function setApi($api)
    {

        $this->api = $api;
        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Sets status
     * @param string $status Status przesyłanego obiektu
     * @return $this
     */
    public function setStatus($status)
    {

        $this->status = $status;
        return $this;
    }

    /**
     * Gets errors
     * @return string[]
     */
    public function getErrors()
    {
        return $this->errors;
    }

    /**
     * Sets errors
     * @param string[] $errors Błędy przesyłanego obiektu
     * @return $this
     */
    public function setErrors($errors)
    {

        $this->errors = $errors;
        return $this;
    }

    /**
     * Gets company
     * @return string[]
     */
    public function getCompany()
    {
        return $this->company;
    }

    /**
     * Sets company
     * @param string[] $company Określenie spółki, której dotyczy wiadomość
     * @return $this
     */
    public function setCompany($company)
    {

        $this->company = $company;
        return $this;
    }

    /**
     * Gets src_id
     * @return string
     */
    public function getSrcId()
    {
        return $this->src_id;
    }

    /**
     * Sets src_id
     * @param string $src_id Identyfikator w systemie wysyłającym. W przypadku CP skrócona nazwaKolekcji_MongoId
     * @return $this
     */
    public function setSrcId($src_id)
    {

        $this->src_id = (string) $src_id;
        return $this;
    }

    /**
     * Gets dst_id
     * @return string
     */
    public function getDstId()
    {
        return $this->dst_id;
    }

    /**
     * Sets dst_id
     * @param string $dst_id Identyfikator w procesie docelowym, jeśli jest znany
     * @return $this
     */
    public function setDstId($dst_id)
    {

        $this->dst_id = $dst_id;
        return $this;
    }

    /**
     * Gets send_dt
     * @return \DateTime
     */
    public function getSendDt()
    {
        return $this->send_dt;
    }

    /**
     * Sets send_dt
     * @param \DateTime $send_dt Czas utworzenia wiadomości
     * @return $this
     */
    public function setSendDt($send_dt)
    {

        $this->send_dt = $send_dt;
        return $this;
    }

    /**
     * Gets body
     * @return object
     */
    public function getBody()
    {
        return $this->body;
    }

    /**
     * Sets body
     * @param object $body Przesyłany obiekt
     * @return $this
     */
    public function setBody($body)
    {

        $this->body = $body;
        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}

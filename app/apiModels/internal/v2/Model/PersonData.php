<?php
/**
 * PersonData
 *
 * PHP version 5
 *
 * @category Class
 * @package  App\apiModels\internal\v2
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WewnÄ™trzne modele wymiany danych o polisach
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace App\apiModels\internal\v2\Model;

use \ArrayAccess;

/**
 * PersonData Class Doc Comment
 *
 * @category    Class */
 // @description Dane osoby
/**
 * @package     App\apiModels\internal\v2
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PersonData implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PersonData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'first_name' => 'string',
        'last_name' => 'string',
        'birth_date' => '\DateTime',
        'pesel' => 'string',
        'nationality' => 'string',
        'document_no' => 'string',
        'business_name' => 'string',
        'short_business_name' => 'string',
        'nip' => 'string',
        'type' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'birth_date' => 'birth_date',
        'pesel' => 'pesel',
        'nationality' => 'nationality',
        'document_no' => 'document_no',
        'business_name' => 'business_name',
        'short_business_name' => 'short_business_name',
        'nip' => 'nip',
        'type' => 'type'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'birth_date' => 'setBirthDate',
        'pesel' => 'setPesel',
        'nationality' => 'setNationality',
        'document_no' => 'setDocumentNo',
        'business_name' => 'setBusinessName',
        'short_business_name' => 'setShortBusinessName',
        'nip' => 'setNip',
        'type' => 'setType'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'birth_date' => 'getBirthDate',
        'pesel' => 'getPesel',
        'nationality' => 'getNationality',
        'document_no' => 'getDocumentNo',
        'business_name' => 'getBusinessName',
        'short_business_name' => 'getShortBusinessName',
        'nip' => 'getNip',
        'type' => 'getType'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const TYPE_PRIVATE = 'private';
    const TYPE_SOLE_TRADER = 'sole_trader';
    const TYPE_COMPANY = 'company';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_PRIVATE,
            self::TYPE_SOLE_TRADER,
            self::TYPE_COMPANY,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['birth_date'] = isset($data['birth_date']) ? $data['birth_date'] : null;
        $this->container['pesel'] = isset($data['pesel']) ? $data['pesel'] : null;
        $this->container['nationality'] = isset($data['nationality']) ? $data['nationality'] : null;
        $this->container['document_no'] = isset($data['document_no']) ? $data['document_no'] : null;
        $this->container['business_name'] = isset($data['business_name']) ? $data['business_name'] : null;
        $this->container['short_business_name'] = isset($data['short_business_name']) ? $data['short_business_name'] : null;
        $this->container['nip'] = isset($data['nip']) ? $data['nip'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!is_null($this->container['first_name']) && (strlen($this->container['first_name']) < 1)) {
            $invalid_properties[] = "invalid value for 'first_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['last_name']) && (strlen($this->container['last_name']) < 1)) {
            $invalid_properties[] = "invalid value for 'last_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['pesel']) && !preg_match("/^[0-9]{11}$/", $this->container['pesel'])) {
            $invalid_properties[] = "invalid value for 'pesel', must be conform to the pattern /^[0-9]{11}$/.";
        }

        if (!is_null($this->container['nationality']) && !preg_match("/^[A-Z]{2}$/", $this->container['nationality'])) {
            $invalid_properties[] = "invalid value for 'nationality', must be conform to the pattern /^[A-Z]{2}$/.";
        }

        if (!is_null($this->container['document_no']) && (strlen($this->container['document_no']) < 1)) {
            $invalid_properties[] = "invalid value for 'document_no', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['business_name']) && (strlen($this->container['business_name']) < 1)) {
            $invalid_properties[] = "invalid value for 'business_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['short_business_name']) && (strlen($this->container['short_business_name']) < 1)) {
            $invalid_properties[] = "invalid value for 'short_business_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['nip']) && !preg_match("/^[0-9]{10}$/", $this->container['nip'])) {
            $invalid_properties[] = "invalid value for 'nip', must be conform to the pattern /^[0-9]{10}$/.";
        }

        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        $allowed_values = ["private", "sole_trader", "company"];
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'type', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if (strlen($this->container['first_name']) < 1) {
            return false;
        }
        if (strlen($this->container['last_name']) < 1) {
            return false;
        }
        if (!preg_match("/^[0-9]{11}$/", $this->container['pesel'])) {
            return false;
        }
        if (!preg_match("/^[A-Z]{2}$/", $this->container['nationality'])) {
            return false;
        }
        if (strlen($this->container['document_no']) < 1) {
            return false;
        }
        if (strlen($this->container['business_name']) < 1) {
            return false;
        }
        if (strlen($this->container['short_business_name']) < 1) {
            return false;
        }
        if (!preg_match("/^[0-9]{10}$/", $this->container['nip'])) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        $allowed_values = ["private", "sole_trader", "company"];
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     * @param string $first_name ImiÄ™
     * @return $this
     */
    public function setFirstName($first_name)
    {

        if (!is_null($first_name) && (strlen($first_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling PersonData., must be bigger than or equal to 1.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     * @param string $last_name Nazwisko
     * @return $this
     */
    public function setLastName($last_name)
    {

        if (!is_null($last_name) && (strlen($last_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling PersonData., must be bigger than or equal to 1.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets birth_date
     * @return \DateTime
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     * @param \DateTime $birth_date Data urodzenia
     * @return $this
     */
    public function setBirthDate($birth_date)
    {
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets pesel
     * @return string
     */
    public function getPesel()
    {
        return $this->container['pesel'];
    }

    /**
     * Sets pesel
     * @param string $pesel Numer PESEL
     * @return $this
     */
    public function setPesel($pesel)
    {

        if (!is_null($pesel) && (!preg_match("/^[0-9]{11}$/", $pesel))) {
            throw new \InvalidArgumentException("invalid value for $pesel when calling PersonData., must conform to the pattern /^[0-9]{11}$/.");
        }

        $this->container['pesel'] = $pesel;

        return $this;
    }

    /**
     * Gets nationality
     * @return string
     */
    public function getNationality()
    {
        return $this->container['nationality'];
    }

    /**
     * Sets nationality
     * @param string $nationality Obywatelstwo (kod kraju zgodny z ISO 3166-1 alpha-2)
     * @return $this
     */
    public function setNationality($nationality)
    {

        if (!is_null($nationality) && (!preg_match("/^[A-Z]{2}$/", $nationality))) {
            throw new \InvalidArgumentException("invalid value for $nationality when calling PersonData., must conform to the pattern /^[A-Z]{2}$/.");
        }

        $this->container['nationality'] = $nationality;

        return $this;
    }

    /**
     * Gets document_no
     * @return string
     */
    public function getDocumentNo()
    {
        return $this->container['document_no'];
    }

    /**
     * Sets document_no
     * @param string $document_no Numer dokumentu toÅ¼samoÅ›ci
     * @return $this
     */
    public function setDocumentNo($document_no)
    {

        if (!is_null($document_no) && (strlen($document_no) < 1)) {
            throw new \InvalidArgumentException('invalid length for $document_no when calling PersonData., must be bigger than or equal to 1.');
        }

        $this->container['document_no'] = $document_no;

        return $this;
    }

    /**
     * Gets business_name
     * @return string
     */
    public function getBusinessName()
    {
        return $this->container['business_name'];
    }

    /**
     * Sets business_name
     * @param string $business_name Nazwa dziaÅ‚alnoÅ›ci
     * @return $this
     */
    public function setBusinessName($business_name)
    {

        if (!is_null($business_name) && (strlen($business_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $business_name when calling PersonData., must be bigger than or equal to 1.');
        }

        $this->container['business_name'] = $business_name;

        return $this;
    }

    /**
     * Gets short_business_name
     * @return string
     */
    public function getShortBusinessName()
    {
        return $this->container['short_business_name'];
    }

    /**
     * Sets short_business_name
     * @param string $short_business_name SkrÃ³cona nazwa dziaÅ‚alnoÅ›ci
     * @return $this
     */
    public function setShortBusinessName($short_business_name)
    {

        if (!is_null($short_business_name) && (strlen($short_business_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $short_business_name when calling PersonData., must be bigger than or equal to 1.');
        }

        $this->container['short_business_name'] = $short_business_name;

        return $this;
    }

    /**
     * Gets nip
     * @return string
     */
    public function getNip()
    {
        return $this->container['nip'];
    }

    /**
     * Sets nip
     * @param string $nip NIP
     * @return $this
     */
    public function setNip($nip)
    {

        if (!is_null($nip) && (!preg_match("/^[0-9]{10}$/", $nip))) {
            throw new \InvalidArgumentException("invalid value for $nip when calling PersonData., must conform to the pattern /^[0-9]{10}$/.");
        }

        $this->container['nip'] = $nip;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type Typ osoby
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = array('private', 'sole_trader', 'company');
        if ((!in_array($type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'type', must be one of 'private', 'sole_trader', 'company'");
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\App\apiModels\internal\v2\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\App\apiModels\internal\v2\ObjectSerializer::sanitizeForSerialization($this));
    }
}

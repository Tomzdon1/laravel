<?php
/**
 * Envelope
 *
 * PHP version 5
 *
 * @category Class
 * @package  App\apiModels\internal\v2
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Koperta wewnÄ™trznego modelu wymiany danych
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace App\apiModels\internal\v2\Model;

use \ArrayAccess;

/**
 * Envelope Class Doc Comment
 *
 * @category    Class */
 // @description Koperta wiadomoÅ›ci
/** 
 * @package     App\apiModels\internal\v2
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Envelope implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'envelope';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'type' => 'string',
        'version' => 'string',
        'src_type' => 'string',
        'src_system' => 'string',
        'status' => 'string',
        'errors' => '\App\apiModels\internal\v2\Model\EnvelopeErrors[]',
        'company' => 'string[]',
        'src_id' => 'string',
        'dst_id' => 'string',
        'send_date' => '\DateTime',
        'body' => 'object'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'type' => 'type',
        'version' => 'version',
        'src_type' => 'src_type',
        'src_system' => 'src_system',
        'status' => 'status',
        'errors' => 'errors',
        'company' => 'company',
        'src_id' => 'src_id',
        'dst_id' => 'dst_id',
        'send_date' => 'send_date',
        'body' => 'body'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'type' => 'setType',
        'version' => 'setVersion',
        'src_type' => 'setSrcType',
        'src_system' => 'setSrcSystem',
        'status' => 'setStatus',
        'errors' => 'setErrors',
        'company' => 'setCompany',
        'src_id' => 'setSrcId',
        'dst_id' => 'setDstId',
        'send_date' => 'setSendDate',
        'body' => 'setBody'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'type' => 'getType',
        'version' => 'getVersion',
        'src_type' => 'getSrcType',
        'src_system' => 'getSrcSystem',
        'status' => 'getStatus',
        'errors' => 'getErrors',
        'company' => 'getCompany',
        'src_id' => 'getSrcId',
        'dst_id' => 'getDstId',
        'send_date' => 'getSendDate',
        'body' => 'getBody'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const TYPE_POLICY_ISSUE_REQUEST = 'policy-issue-request';
    const TYPE_POLICY_STATUS = 'policy-status';
    const TYPE_SMS_SEND_REQUEST = 'sms-send-request';
    const TYPE_SMS_STATUS = 'sms-status';
    const TYPE_MAIL_SEND_REQUEST = 'mail-send-request';
    const TYPE_MAIL_STATUS = 'mail-status';
    const STATUS_OK = 'OK';
    const STATUS_WARN = 'WARN';
    const STATUS_ERR = 'ERR';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_POLICY_ISSUE_REQUEST,
            self::TYPE_POLICY_STATUS,
            self::TYPE_SMS_SEND_REQUEST,
            self::TYPE_SMS_STATUS,
            self::TYPE_MAIL_SEND_REQUEST,
            self::TYPE_MAIL_STATUS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_OK,
            self::STATUS_WARN,
            self::STATUS_ERR,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['src_type'] = isset($data['src_type']) ? $data['src_type'] : null;
        $this->container['src_system'] = isset($data['src_system']) ? $data['src_system'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['errors'] = isset($data['errors']) ? $data['errors'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['src_id'] = isset($data['src_id']) ? $data['src_id'] : null;
        $this->container['dst_id'] = isset($data['dst_id']) ? $data['dst_id'] : null;
        $this->container['send_date'] = isset($data['send_date']) ? $data['send_date'] : null;
        $this->container['body'] = isset($data['body']) ? $data['body'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        $allowed_values = array("policy-issue-request", "policy-status", "sms-send-request", "sms-status", "mail-send-request", "mail-status");
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'type', must be one of #{allowed_values}.";
        }

        if ($this->container['version'] === null) {
            $invalid_properties[] = "'version' can't be null";
        }
        if ($this->container['src_type'] === null) {
            $invalid_properties[] = "'src_type' can't be null";
        }
        if ($this->container['src_system'] === null) {
            $invalid_properties[] = "'src_system' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalid_properties[] = "'status' can't be null";
        }
        $allowed_values = array("OK", "WARN", "ERR");
        if (!in_array($this->container['status'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'status', must be one of #{allowed_values}.";
        }

        if ($this->container['errors'] === null) {
            $invalid_properties[] = "'errors' can't be null";
        }
        if ($this->container['company'] === null) {
            $invalid_properties[] = "'company' can't be null";
        }
        if ($this->container['send_date'] === null) {
            $invalid_properties[] = "'send_date' can't be null";
        }
        if ($this->container['body'] === null) {
            $invalid_properties[] = "'body' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['type'] === null) {
            return false;
        }
        $allowed_values = array("policy-issue-request", "policy-status", "sms-send-request", "sms-status", "mail-send-request", "mail-status");
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        if ($this->container['version'] === null) {
            return false;
        }
        if ($this->container['src_type'] === null) {
            return false;
        }
        if ($this->container['src_system'] === null) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        $allowed_values = array("OK", "WARN", "ERR");
        if (!in_array($this->container['status'], $allowed_values)) {
            return false;
        }
        if ($this->container['errors'] === null) {
            return false;
        }
        if ($this->container['company'] === null) {
            return false;
        }
        if ($this->container['send_date'] === null) {
            return false;
        }
        if ($this->container['body'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type Typ przesyÅ‚anego obiektu
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = array('policy-issue-request', 'policy-status', 'sms-send-request', 'sms-status', 'mail-send-request', 'mail-status');
        if (!in_array($type, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'type', must be one of 'policy-issue-request', 'policy-status', 'sms-send-request', 'sms-status', 'mail-send-request', 'mail-status'");
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets version
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     * @param string $version Wersja przesyÅ‚anego obiektu
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets src_type
     * @return string
     */
    public function getSrcType()
    {
        return $this->container['src_type'];
    }

    /**
     * Sets src_type
     * @param string $src_type Typ obiektu ÅºrÃ³dÅ‚owego
     * @return $this
     */
    public function setSrcType($src_type)
    {
        $this->container['src_type'] = $src_type;

        return $this;
    }

    /**
     * Gets src_system
     * @return string
     */
    public function getSrcSystem()
    {
        return $this->container['src_system'];
    }

    /**
     * Sets src_system
     * @param string $src_system Obiekt ÅºrÃ³dÅ‚owy
     * @return $this
     */
    public function setSrcSystem($src_system)
    {
        $this->container['src_system'] = $src_system;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status Status przesyÅ‚anego obiektu
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = array('OK', 'WARN', 'ERR');
        if (!in_array($status, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'status', must be one of 'OK', 'WARN', 'ERR'");
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets errors
     * @return \App\apiModels\internal\v2\Model\EnvelopeErrors[]
     */
    public function getErrors()
    {
        return $this->container['errors'];
    }

    /**
     * Sets errors
     * @param \App\apiModels\internal\v2\Model\EnvelopeErrors[] $errors BÅ‚Ä™dy przesyÅ‚anego obiektu
     * @return $this
     */
    public function setErrors($errors)
    {
        $this->container['errors'] = $errors;

        return $this;
    }

    /**
     * Gets company
     * @return string[]
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     * @param string[] $company OkreÅ›lenie spÃ³Å‚ki, ktÃ³rej dotyczy wiadomoÅ›Ä‡
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets src_id
     * @return string
     */
    public function getSrcId()
    {
        return $this->container['src_id'];
    }

    /**
     * Sets src_id
     * @param string $src_id Identyfikator w systemie wysyÅ‚ajÄ…cym. W przypadku CP skrÃ³cona nazwaKolekcji_MongoId
     * @return $this
     */
    public function setSrcId($src_id)
    {
        $this->container['src_id'] = $src_id;

        return $this;
    }

    /**
     * Gets dst_id
     * @return string
     */
    public function getDstId()
    {
        return $this->container['dst_id'];
    }

    /**
     * Sets dst_id
     * @param string $dst_id Identyfikator w procesie docelowym, jeÅ›li jest znany
     * @return $this
     */
    public function setDstId($dst_id)
    {
        $this->container['dst_id'] = $dst_id;

        return $this;
    }

    /**
     * Gets send_date
     * @return \DateTime
     */
    public function getSendDate()
    {
        return $this->container['send_date'];
    }

    /**
     * Sets send_date
     * @param \DateTime $send_date Czas utworzenia wiadomoÅ›ci
     * @return $this
     */
    public function setSendDate($send_date)
    {
        $this->container['send_date'] = $send_date;

        return $this;
    }

    /**
     * Gets body
     * @return object
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     * @param object $body PrzesyÅ‚any obiekt o wskazanym typie zgodny z osobnÄ… dokumentacjÄ…
     * @return $this
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\App\apiModels\internal\v2\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\App\apiModels\internal\v2\ObjectSerializer::sanitizeForSerialization($this));
    }
}



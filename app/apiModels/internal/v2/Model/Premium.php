<?php
/**
 * Premium
 *
 * PHP version 5
 *
 * @category Class
 * @package  App\apiModels\internal\v2
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Wewnętrzne modele wymiany danych o polisach
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace App\apiModels\internal\v2\Model;

use \ArrayAccess;

/**
 * Premium Class Doc Comment
 *
 * @category    Class */
 // @description Składka
/**
 * @package     App\apiModels\internal\v2
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Premium implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Premium';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'value_base' => 'float',
        'value_base_currency' => 'string',
        'value' => 'float',
        'value_currency' => 'string',
        'currency_rate' => 'float',
        'date_rate' => '\DateTime'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'value_base' => 'value_base',
        'value_base_currency' => 'value_base_currency',
        'value' => 'value',
        'value_currency' => 'value_currency',
        'currency_rate' => 'currency_rate',
        'date_rate' => 'date_rate'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'value_base' => 'setValueBase',
        'value_base_currency' => 'setValueBaseCurrency',
        'value' => 'setValue',
        'value_currency' => 'setValueCurrency',
        'currency_rate' => 'setCurrencyRate',
        'date_rate' => 'setDateRate'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'value_base' => 'getValueBase',
        'value_base_currency' => 'getValueBaseCurrency',
        'value' => 'getValue',
        'value_currency' => 'getValueCurrency',
        'currency_rate' => 'getCurrencyRate',
        'date_rate' => 'getDateRate'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['value_base'] = isset($data['value_base']) ? $data['value_base'] : null;
        $this->container['value_base_currency'] = isset($data['value_base_currency']) ? $data['value_base_currency'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['value_currency'] = isset($data['value_currency']) ? $data['value_currency'] : null;
        $this->container['currency_rate'] = isset($data['currency_rate']) ? $data['currency_rate'] : null;
        $this->container['date_rate'] = isset($data['date_rate']) ? $data['date_rate'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['value_base'] === null) {
            $invalid_properties[] = "'value_base' can't be null";
        }
        if ($this->container['value_base_currency'] === null) {
            $invalid_properties[] = "'value_base_currency' can't be null";
        }
        if (!preg_match("/^[A-Z]{3}$/", $this->container['value_base_currency'])) {
            $invalid_properties[] = "invalid value for 'value_base_currency', must be conform to the pattern /^[A-Z]{3}$/.";
        }

        if ($this->container['value'] === null) {
            $invalid_properties[] = "'value' can't be null";
        }
        if ($this->container['value_currency'] === null) {
            $invalid_properties[] = "'value_currency' can't be null";
        }
        if (!preg_match("/^[A-Z]{3}$/", $this->container['value_currency'])) {
            $invalid_properties[] = "invalid value for 'value_currency', must be conform to the pattern /^[A-Z]{3}$/.";
        }

        if ($this->container['currency_rate'] === null) {
            $invalid_properties[] = "'currency_rate' can't be null";
        }
        if ($this->container['date_rate'] === null) {
            $invalid_properties[] = "'date_rate' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['value_base'] === null) {
            return false;
        }
        if ($this->container['value_base_currency'] === null) {
            return false;
        }
        if (!preg_match("/^[A-Z]{3}$/", $this->container['value_base_currency'])) {
            return false;
        }
        if ($this->container['value'] === null) {
            return false;
        }
        if ($this->container['value_currency'] === null) {
            return false;
        }
        if (!preg_match("/^[A-Z]{3}$/", $this->container['value_currency'])) {
            return false;
        }
        if ($this->container['currency_rate'] === null) {
            return false;
        }
        if ($this->container['date_rate'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets value_base
     * @return float
     */
    public function getValueBase()
    {
        return $this->container['value_base'];
    }

    /**
     * Sets value_base
     * @param float $value_base Kwota składki w walucie podstawowej
     * @return $this
     */
    public function setValueBase($value_base)
    {
        $this->container['value_base'] = $value_base;

        return $this;
    }

    /**
     * Gets value_base_currency
     * @return string
     */
    public function getValueBaseCurrency()
    {
        return $this->container['value_base_currency'];
    }

    /**
     * Sets value_base_currency
     * @param string $value_base_currency Waluta podstawowa (kod waluty zgodny z ISO 4217)
     * @return $this
     */
    public function setValueBaseCurrency($value_base_currency)
    {

        if ((!preg_match("/^[A-Z]{3}$/", $value_base_currency))) {
            throw new \InvalidArgumentException("invalid value for $value_base_currency when calling Premium., must conform to the pattern /^[A-Z]{3}$/.");
        }

        $this->container['value_base_currency'] = $value_base_currency;

        return $this;
    }

    /**
     * Gets value
     * @return float
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     * @param float $value Kwota składki
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets value_currency
     * @return string
     */
    public function getValueCurrency()
    {
        return $this->container['value_currency'];
    }

    /**
     * Sets value_currency
     * @param string $value_currency Waluta (kod waluty zgodny z ISO 4217)
     * @return $this
     */
    public function setValueCurrency($value_currency)
    {

        if ((!preg_match("/^[A-Z]{3}$/", $value_currency))) {
            throw new \InvalidArgumentException("invalid value for $value_currency when calling Premium., must conform to the pattern /^[A-Z]{3}$/.");
        }

        $this->container['value_currency'] = $value_currency;

        return $this;
    }

    /**
     * Gets currency_rate
     * @return float
     */
    public function getCurrencyRate()
    {
        return $this->container['currency_rate'];
    }

    /**
     * Sets currency_rate
     * @param float $currency_rate Kurs waluty
     * @return $this
     */
    public function setCurrencyRate($currency_rate)
    {
        $this->container['currency_rate'] = $currency_rate;

        return $this;
    }

    /**
     * Gets date_rate
     * @return \DateTime
     */
    public function getDateRate()
    {
        return $this->container['date_rate'];
    }

    /**
     * Sets date_rate
     * @param \DateTime $date_rate Data kursu
     * @return $this
     */
    public function setDateRate($date_rate)
    {
        $this->container['date_rate'] = $date_rate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\App\apiModels\internal\v2\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\App\apiModels\internal\v2\ObjectSerializer::sanitizeForSerialization($this));
    }
}

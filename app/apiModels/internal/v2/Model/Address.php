<?php
/**
 * Address
 *
 * PHP version 5
 *
 * @category Class
 * @package  App\apiModels\internal\v2
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Wewnętrzne modele wymiany danych o polisach
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace App\apiModels\internal\v2\Model;

use \ArrayAccess;

/**
 * Address Class Doc Comment
 *
 * @category    Class */
 // @description Dane adresowe
/**
 * @package     App\apiModels\internal\v2
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Address implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Address';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'country' => 'string',
        'post_code' => 'string',
        'city' => 'string',
        'street' => 'string',
        'house_no' => 'string',
        'flat_no' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'country' => 'country',
        'post_code' => 'post_code',
        'city' => 'city',
        'street' => 'street',
        'house_no' => 'house_no',
        'flat_no' => 'flat_no'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'country' => 'setCountry',
        'post_code' => 'setPostCode',
        'city' => 'setCity',
        'street' => 'setStreet',
        'house_no' => 'setHouseNo',
        'flat_no' => 'setFlatNo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'country' => 'getCountry',
        'post_code' => 'getPostCode',
        'city' => 'getCity',
        'street' => 'getStreet',
        'house_no' => 'getHouseNo',
        'flat_no' => 'getFlatNo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['post_code'] = isset($data['post_code']) ? $data['post_code'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['street'] = isset($data['street']) ? $data['street'] : null;
        $this->container['house_no'] = isset($data['house_no']) ? $data['house_no'] : null;
        $this->container['flat_no'] = isset($data['flat_no']) ? $data['flat_no'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['country'] === null) {
            $invalid_properties[] = "'country' can't be null";
        }
        if (!preg_match("/^[A-Z]{2}$/", $this->container['country'])) {
            $invalid_properties[] = "invalid value for 'country', must be conform to the pattern /^[A-Z]{2}$/.";
        }

        if ($this->container['post_code'] === null) {
            $invalid_properties[] = "'post_code' can't be null";
        }
        if ((strlen($this->container['post_code']) < 1)) {
            $invalid_properties[] = "invalid value for 'post_code', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['city'] === null) {
            $invalid_properties[] = "'city' can't be null";
        }
        if ((strlen($this->container['city']) < 1)) {
            $invalid_properties[] = "invalid value for 'city', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['street'] === null) {
            $invalid_properties[] = "'street' can't be null";
        }
        if ((strlen($this->container['street']) < 1)) {
            $invalid_properties[] = "invalid value for 'street', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['house_no'] === null) {
            $invalid_properties[] = "'house_no' can't be null";
        }
        if ((strlen($this->container['house_no']) < 1)) {
            $invalid_properties[] = "invalid value for 'house_no', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['flat_no']) && (strlen($this->container['flat_no']) < 1)) {
            $invalid_properties[] = "invalid value for 'flat_no', the character length must be bigger than or equal to 1.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['country'] === null) {
            return false;
        }
        if (!preg_match("/^[A-Z]{2}$/", $this->container['country'])) {
            return false;
        }
        if ($this->container['post_code'] === null) {
            return false;
        }
        if (strlen($this->container['post_code']) < 1) {
            return false;
        }
        if ($this->container['city'] === null) {
            return false;
        }
        if (strlen($this->container['city']) < 1) {
            return false;
        }
        if ($this->container['street'] === null) {
            return false;
        }
        if (strlen($this->container['street']) < 1) {
            return false;
        }
        if ($this->container['house_no'] === null) {
            return false;
        }
        if (strlen($this->container['house_no']) < 1) {
            return false;
        }
        if (strlen($this->container['flat_no']) < 1) {
            return false;
        }
        return true;
    }


    /**
     * Gets country
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     * @param string $country Kraj (kod kraju zgodny z ISO 3166-1 alpha-2)
     * @return $this
     */
    public function setCountry($country)
    {

        if ((!preg_match("/^[A-Z]{2}$/", $country))) {
            throw new \InvalidArgumentException("invalid value for $country when calling Address., must conform to the pattern /^[A-Z]{2}$/.");
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets post_code
     * @return string
     */
    public function getPostCode()
    {
        return $this->container['post_code'];
    }

    /**
     * Sets post_code
     * @param string $post_code Kod pocztowy
     * @return $this
     */
    public function setPostCode($post_code)
    {

        if ((strlen($post_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $post_code when calling Address., must be bigger than or equal to 1.');
        }

        $this->container['post_code'] = $post_code;

        return $this;
    }

    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     * @param string $city Miejscowość
     * @return $this
     */
    public function setCity($city)
    {

        if ((strlen($city) < 1)) {
            throw new \InvalidArgumentException('invalid length for $city when calling Address., must be bigger than or equal to 1.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets street
     * @return string
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     * @param string $street Ulica
     * @return $this
     */
    public function setStreet($street)
    {

        if ((strlen($street) < 1)) {
            throw new \InvalidArgumentException('invalid length for $street when calling Address., must be bigger than or equal to 1.');
        }

        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets house_no
     * @return string
     */
    public function getHouseNo()
    {
        return $this->container['house_no'];
    }

    /**
     * Sets house_no
     * @param string $house_no Numer domu
     * @return $this
     */
    public function setHouseNo($house_no)
    {

        if ((strlen($house_no) < 1)) {
            throw new \InvalidArgumentException('invalid length for $house_no when calling Address., must be bigger than or equal to 1.');
        }

        $this->container['house_no'] = $house_no;

        return $this;
    }

    /**
     * Gets flat_no
     * @return string
     */
    public function getFlatNo()
    {
        return $this->container['flat_no'];
    }

    /**
     * Sets flat_no
     * @param string $flat_no Numer mieszkania
     * @return $this
     */
    public function setFlatNo($flat_no)
    {

        if (!is_null($flat_no) && (strlen($flat_no) < 1)) {
            throw new \InvalidArgumentException('invalid length for $flat_no when calling Address., must be bigger than or equal to 1.');
        }

        $this->container['flat_no'] = $flat_no;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\App\apiModels\internal\v2\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\App\apiModels\internal\v2\ObjectSerializer::sanitizeForSerialization($this));
    }
}

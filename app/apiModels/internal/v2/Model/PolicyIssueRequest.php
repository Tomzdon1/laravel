<?php
/**
 * PolicyIssueRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  App\apiModels\internal\v2
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WewnÄ™trzny model wymiany danych
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0_draft1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace App\apiModels\internal\v2\Model;

use \ArrayAccess;

/**
 * PolicyIssueRequest Class Doc Comment
 *
 * @category    Class */
 // @description Potwierdzenie zapisania polisy w systemie docelowym
/** 
 * @package     App\apiModels\internal\v2
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PolicyIssueRequest implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'policyIssueRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'policy_date' => '\DateTime',
        'policy_number' => 'string',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'abroad' => 'bool',
        'destination' => 'string',
        'options' => '\App\apiModels\internal\v2\Model\OPTIONVALUE[]',
        'addons' => '\App\apiModels\internal\v2\Model\OPTIONVALUE[]',
        'policy_holder' => '\App\apiModels\internal\v2\Model\POLICYHOLDER',
        'insured' => '\App\apiModels\internal\v2\Model\INSURED[]',
        'premium' => '\App\apiModels\internal\v2\Model\PREMIUM',
        'tariff_premium' => '\App\apiModels\internal\v2\Model\PREMIUM',
        'netto_premium' => '\App\apiModels\internal\v2\Model\PREMIUM',
        'partner' => '\App\apiModels\internal\v2\Model\PARTNER',
        'product' => '\App\apiModels\internal\v2\Model\PRODUCT'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'policy_date' => 'policy_date',
        'policy_number' => 'policy_number',
        'start_date' => 'start_date',
        'end_date' => 'end_date',
        'abroad' => 'abroad',
        'destination' => 'destination',
        'options' => 'options',
        'addons' => 'addons',
        'policy_holder' => 'policy_holder',
        'insured' => 'insured',
        'premium' => 'premium',
        'tariff_premium' => 'tariff_premium',
        'netto_premium' => 'netto_premium',
        'partner' => 'partner',
        'product' => 'product'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'policy_date' => 'setPolicyDate',
        'policy_number' => 'setPolicyNumber',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'abroad' => 'setAbroad',
        'destination' => 'setDestination',
        'options' => 'setOptions',
        'addons' => 'setAddons',
        'policy_holder' => 'setPolicyHolder',
        'insured' => 'setInsured',
        'premium' => 'setPremium',
        'tariff_premium' => 'setTariffPremium',
        'netto_premium' => 'setNettoPremium',
        'partner' => 'setPartner',
        'product' => 'setProduct'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'policy_date' => 'getPolicyDate',
        'policy_number' => 'getPolicyNumber',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'abroad' => 'getAbroad',
        'destination' => 'getDestination',
        'options' => 'getOptions',
        'addons' => 'getAddons',
        'policy_holder' => 'getPolicyHolder',
        'insured' => 'getInsured',
        'premium' => 'getPremium',
        'tariff_premium' => 'getTariffPremium',
        'netto_premium' => 'getNettoPremium',
        'partner' => 'getPartner',
        'product' => 'getProduct'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['policy_date'] = isset($data['policy_date']) ? $data['policy_date'] : null;
        $this->container['policy_number'] = isset($data['policy_number']) ? $data['policy_number'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['abroad'] = isset($data['abroad']) ? $data['abroad'] : null;
        $this->container['destination'] = isset($data['destination']) ? $data['destination'] : null;
        $this->container['options'] = isset($data['options']) ? $data['options'] : null;
        $this->container['addons'] = isset($data['addons']) ? $data['addons'] : null;
        $this->container['policy_holder'] = isset($data['policy_holder']) ? $data['policy_holder'] : null;
        $this->container['insured'] = isset($data['insured']) ? $data['insured'] : null;
        $this->container['premium'] = isset($data['premium']) ? $data['premium'] : null;
        $this->container['tariff_premium'] = isset($data['tariff_premium']) ? $data['tariff_premium'] : null;
        $this->container['netto_premium'] = isset($data['netto_premium']) ? $data['netto_premium'] : null;
        $this->container['partner'] = isset($data['partner']) ? $data['partner'] : null;
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['policy_date'] === null) {
            $invalid_properties[] = "'policy_date' can't be null";
        }
        if ($this->container['policy_number'] === null) {
            $invalid_properties[] = "'policy_number' can't be null";
        }
        if ((strlen($this->container['policy_number']) < 1)) {
            $invalid_properties[] = "invalid value for 'policy_number', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['start_date'] === null) {
            $invalid_properties[] = "'start_date' can't be null";
        }
        if ($this->container['end_date'] === null) {
            $invalid_properties[] = "'end_date' can't be null";
        }
        if (!is_null($this->container['destination']) && !preg_match("/^[A-Z]{2}$/", $this->container['destination'])) {
            $invalid_properties[] = "invalid value for 'destination', must be conform to the pattern ^[A-Z]{2}$.";
        }

        if ($this->container['policy_holder'] === null) {
            $invalid_properties[] = "'policy_holder' can't be null";
        }
        if ($this->container['insured'] === null) {
            $invalid_properties[] = "'insured' can't be null";
        }
        if ($this->container['premium'] === null) {
            $invalid_properties[] = "'premium' can't be null";
        }
        if ($this->container['tariff_premium'] === null) {
            $invalid_properties[] = "'tariff_premium' can't be null";
        }
        if ($this->container['partner'] === null) {
            $invalid_properties[] = "'partner' can't be null";
        }
        if ($this->container['product'] === null) {
            $invalid_properties[] = "'product' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['policy_date'] === null) {
            return false;
        }
        if ($this->container['policy_number'] === null) {
            return false;
        }
        if (strlen($this->container['policy_number']) < 1) {
            return false;
        }
        if ($this->container['start_date'] === null) {
            return false;
        }
        if ($this->container['end_date'] === null) {
            return false;
        }
        if (!preg_match("/^[A-Z]{2}$/", $this->container['destination'])) {
            return false;
        }
        if ($this->container['policy_holder'] === null) {
            return false;
        }
        if ($this->container['insured'] === null) {
            return false;
        }
        if ($this->container['premium'] === null) {
            return false;
        }
        if ($this->container['tariff_premium'] === null) {
            return false;
        }
        if ($this->container['partner'] === null) {
            return false;
        }
        if ($this->container['product'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets policy_date
     * @return \DateTime
     */
    public function getPolicyDate()
    {
        return $this->container['policy_date'];
    }

    /**
     * Sets policy_date
     * @param \DateTime $policy_date Data zawarcia polisy
     * @return $this
     */
    public function setPolicyDate($policy_date)
    {
        $this->container['policy_date'] = $policy_date;

        return $this;
    }

    /**
     * Gets policy_number
     * @return string
     */
    public function getPolicyNumber()
    {
        return $this->container['policy_number'];
    }

    /**
     * Sets policy_number
     * @param string $policy_number Numer polisy
     * @return $this
     */
    public function setPolicyNumber($policy_number)
    {

        if (strlen($policy_number) < 1) {
            throw new \InvalidArgumentException('invalid length for $policy_number when calling PolicyIssueRequest., must be bigger than or equal to 1.');
        }
        $this->container['policy_number'] = $policy_number;

        return $this;
    }

    /**
     * Gets start_date
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     * @param \DateTime $start_date Data rozpoczÄ™cia ochrony
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     * @param \DateTime $end_date Data zakoÅ„czenia ochrony
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets abroad
     * @return bool
     */
    public function getAbroad()
    {
        return $this->container['abroad'];
    }

    /**
     * Sets abroad
     * @param bool $abroad Czy ubezpieczony przebywa za granicÄ… Polski w momencie przystÄ…pienia do ubezpieczenia (informacja waÅ¼na ze wzglÄ™du na ewentualnÄ… karencjÄ™ w ochronie ubezpieczeniowej)
     * @return $this
     */
    public function setAbroad($abroad)
    {
        $this->container['abroad'] = $abroad;

        return $this;
    }

    /**
     * Gets destination
     * @return string
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     * @param string $destination Cel podrÃ³Å¼y (kod kraju okreÅ›lony w ISO 3166-1 alpha-2 lub EU - Unia Europejska lub WR - Å›wiat)
     * @return $this
     */
    public function setDestination($destination)
    {

        if (!preg_match("/^[A-Z]{2}$/", $destination)) {
            throw new \InvalidArgumentException('invalid value for $destination when calling PolicyIssueRequest., must be conform to the pattern ^[A-Z]{2}$.');
        }
        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets options
     * @return \App\apiModels\internal\v2\Model\OPTIONVALUE[]
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     * @param \App\apiModels\internal\v2\Model\OPTIONVALUE[] $options Wybrane opcje dodatkowe
     * @return $this
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets addons
     * @return \App\apiModels\internal\v2\Model\OPTIONVALUE[]
     */
    public function getAddons()
    {
        return $this->container['addons'];
    }

    /**
     * Sets addons
     * @param \App\apiModels\internal\v2\Model\OPTIONVALUE[] $addons Dodatkowe atrybuty
     * @return $this
     */
    public function setAddons($addons)
    {
        $this->container['addons'] = $addons;

        return $this;
    }

    /**
     * Gets policy_holder
     * @return \App\apiModels\internal\v2\Model\POLICYHOLDER
     */
    public function getPolicyHolder()
    {
        return $this->container['policy_holder'];
    }

    /**
     * Sets policy_holder
     * @param \App\apiModels\internal\v2\Model\POLICYHOLDER $policy_holder
     * @return $this
     */
    public function setPolicyHolder($policy_holder)
    {
        $this->container['policy_holder'] = $policy_holder;

        return $this;
    }

    /**
     * Gets insured
     * @return \App\apiModels\internal\v2\Model\INSURED[]
     */
    public function getInsured()
    {
        return $this->container['insured'];
    }

    /**
     * Sets insured
     * @param \App\apiModels\internal\v2\Model\INSURED[] $insured Dane ubezpieczonych
     * @return $this
     */
    public function setInsured($insured)
    {
        $this->container['insured'] = $insured;

        return $this;
    }

    /**
     * Gets premium
     * @return \App\apiModels\internal\v2\Model\PREMIUM
     */
    public function getPremium()
    {
        return $this->container['premium'];
    }

    /**
     * Sets premium
     * @param \App\apiModels\internal\v2\Model\PREMIUM $premium SkÅ‚adka pobrana/naleÅ¼na
     * @return $this
     */
    public function setPremium($premium)
    {
        $this->container['premium'] = $premium;

        return $this;
    }

    /**
     * Gets tariff_premium
     * @return \App\apiModels\internal\v2\Model\PREMIUM
     */
    public function getTariffPremium()
    {
        return $this->container['tariff_premium'];
    }

    /**
     * Sets tariff_premium
     * @param \App\apiModels\internal\v2\Model\PREMIUM $tariff_premium SkÅ‚adka wynikajÄ…ca z taryfy
     * @return $this
     */
    public function setTariffPremium($tariff_premium)
    {
        $this->container['tariff_premium'] = $tariff_premium;

        return $this;
    }

    /**
     * Gets netto_premium
     * @return \App\apiModels\internal\v2\Model\PREMIUM
     */
    public function getNettoPremium()
    {
        return $this->container['netto_premium'];
    }

    /**
     * Sets netto_premium
     * @param \App\apiModels\internal\v2\Model\PREMIUM $netto_premium SkÅ‚adka netto
     * @return $this
     */
    public function setNettoPremium($netto_premium)
    {
        $this->container['netto_premium'] = $netto_premium;

        return $this;
    }

    /**
     * Gets partner
     * @return \App\apiModels\internal\v2\Model\PARTNER
     */
    public function getPartner()
    {
        return $this->container['partner'];
    }

    /**
     * Sets partner
     * @param \App\apiModels\internal\v2\Model\PARTNER $partner
     * @return $this
     */
    public function setPartner($partner)
    {
        $this->container['partner'] = $partner;

        return $this;
    }

    /**
     * Gets product
     * @return \App\apiModels\internal\v2\Model\PRODUCT
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     * @param \App\apiModels\internal\v2\Model\PRODUCT $product
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\App\apiModels\internal\v2\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\App\apiModels\internal\v2\ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * Agent
 *
 * PHP version 5
 *
 * @category Class
 * @package  App\apiModels\internal\v2
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Wewnętrzne modele wymiany danych o polisach
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace App\apiModels\internal\v2\Model;

use \ArrayAccess;

/**
 * Agent Class Doc Comment
 *
 * @category    Class */
 // @description Agent
/**
 * @package     App\apiModels\internal\v2
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Agent implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Agent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'role' => 'string',
        'create_folder' => 'bool',
        'distribution_channel' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'role' => 'role',
        'create_folder' => 'create_folder',
        'distribution_channel' => 'distribution_channel'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'role' => 'setRole',
        'create_folder' => 'setCreateFolder',
        'distribution_channel' => 'setDistributionChannel'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'role' => 'getRole',
        'create_folder' => 'getCreateFolder',
        'distribution_channel' => 'getDistributionChannel'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['role'] = isset($data['role']) ? $data['role'] : null;
        $this->container['create_folder'] = isset($data['create_folder']) ? $data['create_folder'] : null;
        $this->container['distribution_channel'] = isset($data['distribution_channel']) ? $data['distribution_channel'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['code'] === null) {
            $invalid_properties[] = "'code' can't be null";
        }
        if ((strlen($this->container['code']) < 1)) {
            $invalid_properties[] = "invalid value for 'code', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['role'] === null) {
            $invalid_properties[] = "'role' can't be null";
        }
        if ((strlen($this->container['role']) < 1)) {
            $invalid_properties[] = "invalid value for 'role', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['create_folder'] === null) {
            $invalid_properties[] = "'create_folder' can't be null";
        }
        if ($this->container['distribution_channel'] === null) {
            $invalid_properties[] = "'distribution_channel' can't be null";
        }
        if ((strlen($this->container['distribution_channel']) < 1)) {
            $invalid_properties[] = "invalid value for 'distribution_channel', the character length must be bigger than or equal to 1.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['code'] === null) {
            return false;
        }
        if (strlen($this->container['code']) < 1) {
            return false;
        }
        if ($this->container['role'] === null) {
            return false;
        }
        if (strlen($this->container['role']) < 1) {
            return false;
        }
        if ($this->container['create_folder'] === null) {
            return false;
        }
        if ($this->container['distribution_channel'] === null) {
            return false;
        }
        if (strlen($this->container['distribution_channel']) < 1) {
            return false;
        }
        return true;
    }


    /**
     * Gets code
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     * @param string $code Kod agenta (symbol jednostki statystyczne)
     * @return $this
     */
    public function setCode($code)
    {

        if ((strlen($code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $code when calling Agent., must be bigger than or equal to 1.');
        }

        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets role
     * @return string
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     * @param string $role Rola agenta
     * @return $this
     */
    public function setRole($role)
    {

        if ((strlen($role) < 1)) {
            throw new \InvalidArgumentException('invalid length for $role when calling Agent., must be bigger than or equal to 1.');
        }

        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets create_folder
     * @return bool
     */
    public function getCreateFolder()
    {
        return $this->container['create_folder'];
    }

    /**
     * Sets create_folder
     * @param bool $create_folder Czy dana jednostka zakłada teczkę
     * @return $this
     */
    public function setCreateFolder($create_folder)
    {
        $this->container['create_folder'] = $create_folder;

        return $this;
    }

    /**
     * Gets distribution_channel
     * @return string
     */
    public function getDistributionChannel()
    {
        return $this->container['distribution_channel'];
    }

    /**
     * Sets distribution_channel
     * @param string $distribution_channel Kanał sprzedaży
     * @return $this
     */
    public function setDistributionChannel($distribution_channel)
    {

        if ((strlen($distribution_channel) < 1)) {
            throw new \InvalidArgumentException('invalid length for $distribution_channel when calling Agent., must be bigger than or equal to 1.');
        }

        $this->container['distribution_channel'] = $distribution_channel;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\App\apiModels\internal\v2\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\App\apiModels\internal\v2\ObjectSerializer::sanitizeForSerialization($this));
    }
}

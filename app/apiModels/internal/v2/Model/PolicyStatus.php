<?php
/**
 * PolicyStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  App\apiModels\internal\v2
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WewnÄ™trzne modele wymiany danych o polisach
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace App\apiModels\internal\v2\Model;

use \ArrayAccess;

/**
 * PolicyStatus Class Doc Comment
 *
 * @category    Class */
 // @description Status polisy w systemie docelowym
/** 
 * @package     App\apiModels\internal\v2
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PolicyStatus implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'policyStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'policy_id' => 'string',
        'policy_status' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'policy_id' => 'policy_id',
        'policy_status' => 'policy_status'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'policy_id' => 'setPolicyId',
        'policy_status' => 'setPolicyStatus'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'policy_id' => 'getPolicyId',
        'policy_status' => 'getPolicyStatus'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const POLICY_STATUS_TEMPORARY = 'TEMPORARY';
    const POLICY_STATUS_FIXED = 'FIXED';
    const POLICY_STATUS_CANCELED = 'CANCELED';
    const POLICY_STATUS_ERR = 'ERR';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPolicyStatusAllowableValues()
    {
        return [
            self::POLICY_STATUS_TEMPORARY,
            self::POLICY_STATUS_FIXED,
            self::POLICY_STATUS_CANCELED,
            self::POLICY_STATUS_ERR,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['policy_id'] = isset($data['policy_id']) ? $data['policy_id'] : null;
        $this->container['policy_status'] = isset($data['policy_status']) ? $data['policy_status'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['policy_id'] === null) {
            $invalid_properties[] = "'policy_id' can't be null";
        }
        if ($this->container['policy_status'] === null) {
            $invalid_properties[] = "'policy_status' can't be null";
        }
        $allowed_values = array("TEMPORARY", "FIXED", "CANCELED", "ERR");
        if (!in_array($this->container['policy_status'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'policy_status', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['policy_id'] === null) {
            return false;
        }
        if ($this->container['policy_status'] === null) {
            return false;
        }
        $allowed_values = array("TEMPORARY", "FIXED", "CANCELED", "ERR");
        if (!in_array($this->container['policy_status'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets policy_id
     * @return string
     */
    public function getPolicyId()
    {
        return $this->container['policy_id'];
    }

    /**
     * Sets policy_id
     * @param string $policy_id Identyfikator polisy w systemie docelowym
     * @return $this
     */
    public function setPolicyId($policy_id)
    {
        $this->container['policy_id'] = $policy_id;

        return $this;
    }

    /**
     * Gets policy_status
     * @return string
     */
    public function getPolicyStatus()
    {
        return $this->container['policy_status'];
    }

    /**
     * Sets policy_status
     * @param string $policy_status Status polisy w systemie docelowym
     * @return $this
     */
    public function setPolicyStatus($policy_status)
    {
        $allowed_values = array('TEMPORARY', 'FIXED', 'CANCELED', 'ERR');
        if (!in_array($policy_status, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'policy_status', must be one of 'TEMPORARY', 'FIXED', 'CANCELED', 'ERR'");
        }
        $this->container['policy_status'] = $policy_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\App\apiModels\internal\v2\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\App\apiModels\internal\v2\ObjectSerializer::sanitizeForSerialization($this));
    }
}



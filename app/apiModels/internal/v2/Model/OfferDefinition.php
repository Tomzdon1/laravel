<?php
/**
 * OfferDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  App\apiModels\internal\v2
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Wewnętrzne modele wymiany danych o polisach
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace App\apiModels\internal\v2\Model;

use \ArrayAccess;

/**
 * OfferDefinition Class Doc Comment
 *
 * @category    Class */
 // @description Definicja oferty, na podstawie której wystawiono polisę
/**
 * @package     App\apiModels\internal\v2
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OfferDefinition implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'OfferDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'code' => 'string',
        'name' => 'string',
        'risks' => '\App\apiModels\internal\v2\Model\Risk[]',
        'agents' => '\App\apiModels\internal\v2\Model\Agent[]',
        'attendant_department_code' => 'string',
        'wube_code' => 'string',
        'form_code' => 'string',
        'folder_type' => 'string',
        'individual_cession' => 'bool',
        'group_cession' => 'bool',
        'is_pgen' => 'bool',
        'pgen_serie' => 'string',
        'pgen_type' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'code' => 'code',
        'name' => 'name',
        'risks' => 'risks',
        'agents' => 'agents',
        'attendant_department_code' => 'attendant_department_code',
        'wube_code' => 'wube_code',
        'form_code' => 'form_code',
        'folder_type' => 'folder_type',
        'individual_cession' => 'individual_cession',
        'group_cession' => 'group_cession',
        'is_pgen' => 'is_pgen',
        'pgen_serie' => 'pgen_serie',
        'pgen_type' => 'pgen_type'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'code' => 'setCode',
        'name' => 'setName',
        'risks' => 'setRisks',
        'agents' => 'setAgents',
        'attendant_department_code' => 'setAttendantDepartmentCode',
        'wube_code' => 'setWubeCode',
        'form_code' => 'setFormCode',
        'folder_type' => 'setFolderType',
        'individual_cession' => 'setIndividualCession',
        'group_cession' => 'setGroupCession',
        'is_pgen' => 'setIsPgen',
        'pgen_serie' => 'setPgenSerie',
        'pgen_type' => 'setPgenType'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'code' => 'getCode',
        'name' => 'getName',
        'risks' => 'getRisks',
        'agents' => 'getAgents',
        'attendant_department_code' => 'getAttendantDepartmentCode',
        'wube_code' => 'getWubeCode',
        'form_code' => 'getFormCode',
        'folder_type' => 'getFolderType',
        'individual_cession' => 'getIndividualCession',
        'group_cession' => 'getGroupCession',
        'is_pgen' => 'getIsPgen',
        'pgen_serie' => 'getPgenSerie',
        'pgen_type' => 'getPgenType'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const PGEN_TYPE_T = 'T';
    const PGEN_TYPE_P = 'P';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPgenTypeAllowableValues()
    {
        return [
            self::PGEN_TYPE_T,
            self::PGEN_TYPE_P,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['risks'] = isset($data['risks']) ? $data['risks'] : null;
        $this->container['agents'] = isset($data['agents']) ? $data['agents'] : null;
        $this->container['attendant_department_code'] = isset($data['attendant_department_code']) ? $data['attendant_department_code'] : null;
        $this->container['wube_code'] = isset($data['wube_code']) ? $data['wube_code'] : null;
        $this->container['form_code'] = isset($data['form_code']) ? $data['form_code'] : null;
        $this->container['folder_type'] = isset($data['folder_type']) ? $data['folder_type'] : null;
        $this->container['individual_cession'] = isset($data['individual_cession']) ? $data['individual_cession'] : null;
        $this->container['group_cession'] = isset($data['group_cession']) ? $data['group_cession'] : null;
        $this->container['is_pgen'] = isset($data['is_pgen']) ? $data['is_pgen'] : null;
        $this->container['pgen_serie'] = isset($data['pgen_serie']) ? $data['pgen_serie'] : null;
        $this->container['pgen_type'] = isset($data['pgen_type']) ? $data['pgen_type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!is_null($this->container['id']) && (strlen($this->container['id']) < 1)) {
            $invalid_properties[] = "invalid value for 'id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['code'] === null) {
            $invalid_properties[] = "'code' can't be null";
        }
        if ((strlen($this->container['code']) < 1)) {
            $invalid_properties[] = "invalid value for 'code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['name']) && (strlen($this->container['name']) < 1)) {
            $invalid_properties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['risks'] === null) {
            $invalid_properties[] = "'risks' can't be null";
        }
        if ($this->container['agents'] === null) {
            $invalid_properties[] = "'agents' can't be null";
        }
        if ($this->container['attendant_department_code'] === null) {
            $invalid_properties[] = "'attendant_department_code' can't be null";
        }
        if ((strlen($this->container['attendant_department_code']) < 1)) {
            $invalid_properties[] = "invalid value for 'attendant_department_code', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['wube_code'] === null) {
            $invalid_properties[] = "'wube_code' can't be null";
        }
        if ((strlen($this->container['wube_code']) < 1)) {
            $invalid_properties[] = "invalid value for 'wube_code', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['form_code'] === null) {
            $invalid_properties[] = "'form_code' can't be null";
        }
        if ((strlen($this->container['form_code']) < 1)) {
            $invalid_properties[] = "invalid value for 'form_code', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['folder_type'] === null) {
            $invalid_properties[] = "'folder_type' can't be null";
        }
        if ((strlen($this->container['folder_type']) < 1)) {
            $invalid_properties[] = "invalid value for 'folder_type', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['individual_cession'] === null) {
            $invalid_properties[] = "'individual_cession' can't be null";
        }
        if ($this->container['group_cession'] === null) {
            $invalid_properties[] = "'group_cession' can't be null";
        }
        if ($this->container['is_pgen'] === null) {
            $invalid_properties[] = "'is_pgen' can't be null";
        }
        if ($this->container['pgen_serie'] === null) {
            $invalid_properties[] = "'pgen_serie' can't be null";
        }
        if ((strlen($this->container['pgen_serie']) < 1)) {
            $invalid_properties[] = "invalid value for 'pgen_serie', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['pgen_type'] === null) {
            $invalid_properties[] = "'pgen_type' can't be null";
        }
        $allowed_values = ["T", "P"];
        if (!in_array($this->container['pgen_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'pgen_type', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if (strlen($this->container['id']) < 1) {
            return false;
        }
        if ($this->container['code'] === null) {
            return false;
        }
        if (strlen($this->container['code']) < 1) {
            return false;
        }
        if (strlen($this->container['name']) < 1) {
            return false;
        }
        if ($this->container['risks'] === null) {
            return false;
        }
        if ($this->container['agents'] === null) {
            return false;
        }
        if ($this->container['attendant_department_code'] === null) {
            return false;
        }
        if (strlen($this->container['attendant_department_code']) < 1) {
            return false;
        }
        if ($this->container['wube_code'] === null) {
            return false;
        }
        if (strlen($this->container['wube_code']) < 1) {
            return false;
        }
        if ($this->container['form_code'] === null) {
            return false;
        }
        if (strlen($this->container['form_code']) < 1) {
            return false;
        }
        if ($this->container['folder_type'] === null) {
            return false;
        }
        if (strlen($this->container['folder_type']) < 1) {
            return false;
        }
        if ($this->container['individual_cession'] === null) {
            return false;
        }
        if ($this->container['group_cession'] === null) {
            return false;
        }
        if ($this->container['is_pgen'] === null) {
            return false;
        }
        if ($this->container['pgen_serie'] === null) {
            return false;
        }
        if (strlen($this->container['pgen_serie']) < 1) {
            return false;
        }
        if ($this->container['pgen_type'] === null) {
            return false;
        }
        $allowed_values = ["T", "P"];
        if (!in_array($this->container['pgen_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id Identyfikator definicji oferty w systemie źródłowym
     * @return $this
     */
    public function setId($id)
    {

        if (!is_null($id) && (strlen($id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $id when calling OfferDefinition., must be bigger than or equal to 1.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets code
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     * @param string $code Kod oferty/taryfy
     * @return $this
     */
    public function setCode($code)
    {

        if ((strlen($code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $code when calling OfferDefinition., must be bigger than or equal to 1.');
        }

        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Nazwa oferty/taryfy
     * @return $this
     */
    public function setName($name)
    {

        if (!is_null($name) && (strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling OfferDefinition., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets risks
     * @return \App\apiModels\internal\v2\Model\Risk[]
     */
    public function getRisks()
    {
        return $this->container['risks'];
    }

    /**
     * Sets risks
     * @param \App\apiModels\internal\v2\Model\Risk[] $risks Definicje ryzyk ubezpieczeniowych
     * @return $this
     */
    public function setRisks($risks)
    {
        $this->container['risks'] = $risks;

        return $this;
    }

    /**
     * Gets agents
     * @return \App\apiModels\internal\v2\Model\Agent[]
     */
    public function getAgents()
    {
        return $this->container['agents'];
    }

    /**
     * Sets agents
     * @param \App\apiModels\internal\v2\Model\Agent[] $agents Definicje agentów ubezpieczeniowych
     * @return $this
     */
    public function setAgents($agents)
    {
        $this->container['agents'] = $agents;

        return $this;
    }

    /**
     * Gets attendant_department_code
     * @return string
     */
    public function getAttendantDepartmentCode()
    {
        return $this->container['attendant_department_code'];
    }

    /**
     * Sets attendant_department_code
     * @param string $attendant_department_code Kod departamentu obslugującego (symbol jednostki statystycznej)
     * @return $this
     */
    public function setAttendantDepartmentCode($attendant_department_code)
    {

        if ((strlen($attendant_department_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $attendant_department_code when calling OfferDefinition., must be bigger than or equal to 1.');
        }

        $this->container['attendant_department_code'] = $attendant_department_code;

        return $this;
    }

    /**
     * Gets wube_code
     * @return string
     */
    public function getWubeCode()
    {
        return $this->container['wube_code'];
    }

    /**
     * Sets wube_code
     * @param string $wube_code Kod warunku ubezpieczeniowego
     * @return $this
     */
    public function setWubeCode($wube_code)
    {

        if ((strlen($wube_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $wube_code when calling OfferDefinition., must be bigger than or equal to 1.');
        }

        $this->container['wube_code'] = $wube_code;

        return $this;
    }

    /**
     * Gets form_code
     * @return string
     */
    public function getFormCode()
    {
        return $this->container['form_code'];
    }

    /**
     * Sets form_code
     * @param string $form_code Kod typu druku
     * @return $this
     */
    public function setFormCode($form_code)
    {

        if ((strlen($form_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $form_code when calling OfferDefinition., must be bigger than or equal to 1.');
        }

        $this->container['form_code'] = $form_code;

        return $this;
    }

    /**
     * Gets folder_type
     * @return string
     */
    public function getFolderType()
    {
        return $this->container['folder_type'];
    }

    /**
     * Sets folder_type
     * @param string $folder_type Kod typu teczki
     * @return $this
     */
    public function setFolderType($folder_type)
    {

        if ((strlen($folder_type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $folder_type when calling OfferDefinition., must be bigger than or equal to 1.');
        }

        $this->container['folder_type'] = $folder_type;

        return $this;
    }

    /**
     * Gets individual_cession
     * @return bool
     */
    public function getIndividualCession()
    {
        return $this->container['individual_cession'];
    }

    /**
     * Sets individual_cession
     * @param bool $individual_cession Czy cesja indywidualna
     * @return $this
     */
    public function setIndividualCession($individual_cession)
    {
        $this->container['individual_cession'] = $individual_cession;

        return $this;
    }

    /**
     * Gets group_cession
     * @return bool
     */
    public function getGroupCession()
    {
        return $this->container['group_cession'];
    }

    /**
     * Sets group_cession
     * @param bool $group_cession Czy cesja grupowa
     * @return $this
     */
    public function setGroupCession($group_cession)
    {
        $this->container['group_cession'] = $group_cession;

        return $this;
    }

    /**
     * Gets is_pgen
     * @return bool
     */
    public function getIsPgen()
    {
        return $this->container['is_pgen'];
    }

    /**
     * Sets is_pgen
     * @param bool $is_pgen Czy tworzyć polisę generalną lub techniczną
     * @return $this
     */
    public function setIsPgen($is_pgen)
    {
        $this->container['is_pgen'] = $is_pgen;

        return $this;
    }

    /**
     * Gets pgen_serie
     * @return string
     */
    public function getPgenSerie()
    {
        return $this->container['pgen_serie'];
    }

    /**
     * Sets pgen_serie
     * @param string $pgen_serie Seria polisy generalnej/technicznej
     * @return $this
     */
    public function setPgenSerie($pgen_serie)
    {

        if ((strlen($pgen_serie) < 1)) {
            throw new \InvalidArgumentException('invalid length for $pgen_serie when calling OfferDefinition., must be bigger than or equal to 1.');
        }

        $this->container['pgen_serie'] = $pgen_serie;

        return $this;
    }

    /**
     * Gets pgen_type
     * @return string
     */
    public function getPgenType()
    {
        return $this->container['pgen_type'];
    }

    /**
     * Sets pgen_type
     * @param string $pgen_type Rodzaj polisy generalnej: T – techniczna, P – polisa
     * @return $this
     */
    public function setPgenType($pgen_type)
    {
        $allowed_values = array('T', 'P');
        if ((!in_array($pgen_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'pgen_type', must be one of 'T', 'P'");
        }
        $this->container['pgen_type'] = $pgen_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\App\apiModels\internal\v2\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\App\apiModels\internal\v2\ObjectSerializer::sanitizeForSerialization($this));
    }
}

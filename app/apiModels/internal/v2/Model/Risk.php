<?php
/**
 * Risk
 *
 * PHP version 5
 *
 * @category Class
 * @package  App\apiModels\internal\v2
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Wewnętrzne modele wymiany danych o polisach
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace App\apiModels\internal\v2\Model;

use \ArrayAccess;

/**
 * Risk Class Doc Comment
 *
 * @category    Class */
 // @description Ryzyko ubezpieczeniowe
/**
 * @package     App\apiModels\internal\v2
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Risk implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Risk';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'name' => 'string',
        'company' => 'string',
        'sum_insured' => 'float',
        'currency' => 'string',
        'division' => 'float'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'name' => 'name',
        'company' => 'company',
        'sum_insured' => 'sum_insured',
        'currency' => 'currency',
        'division' => 'division'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'name' => 'setName',
        'company' => 'setCompany',
        'sum_insured' => 'setSumInsured',
        'currency' => 'setCurrency',
        'division' => 'setDivision'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'name' => 'getName',
        'company' => 'getCompany',
        'sum_insured' => 'getSumInsured',
        'currency' => 'getCurrency',
        'division' => 'getDivision'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['sum_insured'] = isset($data['sum_insured']) ? $data['sum_insured'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['division'] = isset($data['division']) ? $data['division'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['code'] === null) {
            $invalid_properties[] = "'code' can't be null";
        }
        if ((strlen($this->container['code']) < 1)) {
            $invalid_properties[] = "invalid value for 'code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['name']) && (strlen($this->container['name']) < 1)) {
            $invalid_properties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['company'] === null) {
            $invalid_properties[] = "'company' can't be null";
        }
        if ((strlen($this->container['company']) < 1)) {
            $invalid_properties[] = "invalid value for 'company', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['sum_insured'] === null) {
            $invalid_properties[] = "'sum_insured' can't be null";
        }
        if (($this->container['sum_insured'] < 0.0)) {
            $invalid_properties[] = "invalid value for 'sum_insured', must be bigger than or equal to 0.0.";
        }

        if ($this->container['currency'] === null) {
            $invalid_properties[] = "'currency' can't be null";
        }
        if (!preg_match("/^[A-Z]{3}$/", $this->container['currency'])) {
            $invalid_properties[] = "invalid value for 'currency', must be conform to the pattern /^[A-Z]{3}$/.";
        }

        if ($this->container['division'] === null) {
            $invalid_properties[] = "'division' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['code'] === null) {
            return false;
        }
        if (strlen($this->container['code']) < 1) {
            return false;
        }
        if (strlen($this->container['name']) < 1) {
            return false;
        }
        if ($this->container['company'] === null) {
            return false;
        }
        if (strlen($this->container['company']) < 1) {
            return false;
        }
        if ($this->container['sum_insured'] === null) {
            return false;
        }
        if ($this->container['sum_insured'] < 0.0) {
            return false;
        }
        if ($this->container['currency'] === null) {
            return false;
        }
        if (!preg_match("/^[A-Z]{3}$/", $this->container['currency'])) {
            return false;
        }
        if ($this->container['division'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets code
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     * @param string $code Kod ryzyka
     * @return $this
     */
    public function setCode($code)
    {

        if ((strlen($code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $code when calling Risk., must be bigger than or equal to 1.');
        }

        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Nazwa ryzyka
     * @return $this
     */
    public function setName($name)
    {

        if (!is_null($name) && (strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Risk., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets company
     * @return string
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     * @param string $company Określenie spółki, której dotyczy ryzyko
     * @return $this
     */
    public function setCompany($company)
    {

        if ((strlen($company) < 1)) {
            throw new \InvalidArgumentException('invalid length for $company when calling Risk., must be bigger than or equal to 1.');
        }

        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets sum_insured
     * @return float
     */
    public function getSumInsured()
    {
        return $this->container['sum_insured'];
    }

    /**
     * Sets sum_insured
     * @param float $sum_insured Suma ubezpieczenia
     * @return $this
     */
    public function setSumInsured($sum_insured)
    {

        if (($sum_insured < 0.0)) {
            throw new \InvalidArgumentException('invalid value for $sum_insured when calling Risk., must be bigger than or equal to 0.0.');
        }

        $this->container['sum_insured'] = $sum_insured;

        return $this;
    }

    /**
     * Gets currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param string $currency Waluta sumy ubezpieczenia (kod waluty zgodny z ISO 4217)
     * @return $this
     */
    public function setCurrency($currency)
    {

        if ((!preg_match("/^[A-Z]{3}$/", $currency))) {
            throw new \InvalidArgumentException("invalid value for $currency when calling Risk., must conform to the pattern /^[A-Z]{3}$/.");
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets division
     * @return float
     */
    public function getDivision()
    {
        return $this->container['division'];
    }

    /**
     * Sets division
     * @param float $division Udział składki w całym przypisie
     * @return $this
     */
    public function setDivision($division)
    {
        $this->container['division'] = $division;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\App\apiModels\internal\v2\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\App\apiModels\internal\v2\ObjectSerializer::sanitizeForSerialization($this));
    }
}
